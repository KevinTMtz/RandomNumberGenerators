{"version":3,"sources":["enums/RNGOptions.ts","styles/styles.ts","components/InputRNG.tsx","components/RandomsList.tsx","utils/convertInputToValues.ts","utils/ChiSquareCritical.ts","classes/Validators/ChiSquare.ts","utils/KolmogorovSmirnovCritical.ts","classes/Validators/KolmogorovSmirnov.ts","classes/Generators/LinearCongruential.ts","classes/Generators/MultiplicativeCongruential.ts","classes/Generators/CombinedCongruential.ts","classes/Generators/MixedCongruential.ts","classes/Generators/MiddleSquares.ts","components/ValidationTable.tsx","components/WarningModal.tsx","containers/Layout.tsx","App.tsx","index.tsx"],"names":["RNGOptions","divStyleRows","css","display","flexDirection","gap","width","divStyleColumns","rngInputsStyle","flexGrow","InputRNG","props","labels","seed","a","c","m","requiredByOption","map","inputStr","index","TextField","label","variant","value","inputValuesArr","onChange","event","name","strNumber","replace","number","Number","isNaN","updatedArr","updatedObject","setInputValues","validateCompleteInput","handleInputChange","target","InputProps","readOnly","randomsListLength","focused","undefined","required","RandomsListDiv","RandomsListBox","border","borderRadius","RandomsList","Box","height","Math","min","numsList","length","itemSize","itemCount","overscanCount","rowProps","style","ListItem","component","disablePadding","ListItemButton","onClick","navigator","clipboard","writeText","String","ListItemText","primary","data","random","filename","textDecoration","Button","fullWidth","convertInputToValues","transformedData","forEach","valuesObj","newObj","Object","keys","key","push","chiSquareDistributionTable","ChiSquare","range","k","classes","table","X0","X1","validate","randoms","alpha","Promise","reject","floor","log10","createTable","getTheoreticalValue","isValid","i","j","start","end","absolute","last","pop","probability","theoretical","cell","result","pow","ksDistributionTable","KolmogorovSmirnov","deviation_max_plus","deviation_max_minus","deviation_max","deviation_critical","n","rnd","cdf","cdf_empirical","deviation_plus","abs","deviation_minus","max","sqrt","LinearCongruential","validateInput","values","generateRandoms","set","Set","has","add","getRandoms","type","sort","MultiplicativeCongruential","CombinedCongruential","val","gen_rnds","then","rnds","error","period","mod","getNextRandom","col","mult","MixedCongruential","validHullDobell","general","rule1","limit","areRelativePrimes","RelativePrimes","rule2","primes","sieve","getPrimes","prime","primeDivision","PrimeDivision","rule3","mCheck","aCheck","mDivision","aDivision","FourDivision","check","MiddleSquares","square","substr","TableStyle","ValidationTable","chiSquareHeaders","chiSquareValues","kolmogorovSmirnovHeaders","kolmogorovValues","isChiSquare","getValidationHeaders","color","TableContainer","sx","maxHeight","Table","size","TableHead","TableRow","header","TableCell","align","TableBody","row","modalStyle","position","top","left","transform","backgroundColor","boxShadow","padding","WarningModal","handleClose","setOpen","Backdrop","open","Modal","onClose","Typography","id","title","mt","message","rootDivStyle","margin","Layout","emptyObjectValues","emptyHullDobell","useState","optionRNG","setOptionRNG","numOfRandoms","setNumOfRandoms","numOfGenerators","setNumOfGenerators","inputValues","inputNotComplete","setInputNotComplete","hullDobell","setHullDobell","randomsList","setRandomsList","validationData","setValidationData","alphaStr","setAlphaStr","openModal","setOpenModal","errorTitle","setErrorTitle","errorMessage","setErrorMessage","handleChangeGenerators","strNumOfGenerators","option","newArr","inputVals","getCurrentRNG","numOfRandomsValue","console","log","handleOpen","makeValidation","validationType","AppBar","Toolbar","FormControl","InputLabel","Select","numOfG","inputProps","MenuItem","strNumOfRandom","_","disabled","includes","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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AO,KACP,IAAM,MACN,KAAO,OAET,EAAG,CACD,KAAO,IACP,IAAM,GACN,KAAO,IACP,IAAM,IACN,GAAK,KACL,GAAK,KACL,GAAK,KACL,IAAM,KACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,EAAG,CACD,KAAO,IACP,IAAM,IACN,KAAO,IACP,IAAM,KACN,GAAK,KACL,GAAK,KACL,GAAK,KACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,EAAG,CACD,KAAO,IACP,IAAM,IACN,KAAO,KACP,IAAM,KACN,GAAK,IACL,GAAK,KACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,EAAG,CACD,KAAO,IACP,IAAM,KACN,KAAO,KACP,IAAM,KACN,GAAK,KACL,GAAK,KACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,EAAG,CACD,KAAO,KACP,IAAM,KACN,KAAO,KACP,IAAM,KACN,GAAK,KACL,GAAK,KACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,EAAG,CACD,KAAO,KACP,IAAM,KACN,KAAO,IACP,IAAM,KACN,GAAK,KACL,GAAK,KACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,GAAI,CACF,KAAO,KACP,IAAM,KACN,KAAO,KACP,IAAM,KACN,GAAK,KACL,GAAK,KACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,GAAI,CACF,KAAO,IACP,IAAM,KACN,KAAO,KACP,IAAM,KACN,GAAK,KACL,GAAK,MACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,GAAI,CACF,KAAO,KACP,IAAM,KACN,KAAO,IACP,IAAM,KACN,GAAK,IACL,GAAK,MACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,MAET,GAAI,CACF,KAAO,KACP,IAAM,KACN,KAAO,KACP,IAAM,KACN,GAAK,KACL,GAAK,MACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,GAAI,CACF,KAAO,KACP,IAAM,KACN,KAAO,KACP,IAAM,KACN,GAAK,KACL,GAAK,MACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,GAAI,CACF,KAAO,IACP,IAAM,KACN,KAAO,KACP,IAAM,KACN,GAAK,KACL,GAAK,MACL,GAAK,MACL,IAAM,GACN,KAAO,MACP,IAAM,MACN,KAAO,MAET,GAAI,CACF,KAAO,KACP,IAAM,KACN,KAAO,KACP,IAAM,KACN,GAAK,KACL,GAAK,MACL,GAAK,MACL,IAAM,KACN,KAAO,MACP,IAAM,GACN,KAAO,OAET,GAAI,CACF,KAAO,IACP,IAAM,KACN,KAAO,KACP,IAAM,KACN,GAAK,MACL,GAAK,MACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,GAAI,CACF,KAAO,KACP,IAAM,KACN,KAAO,KACP,IAAM,KACN,GAAK,MACL,GAAK,MACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,GAAI,CACF,KAAO,KACP,IAAM,KACN,KAAO,KACP,IAAM,MACN,GAAK,MACL,GAAK,MACL,GAAK,KACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,GAAI,CACF,KAAO,KACP,IAAM,KACN,KAAO,KACP,IAAM,MACN,GAAK,MACL,GAAK,MACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,IAET,GAAI,CACF,KAAO,KACP,IAAM,IACN,KAAO,MACP,IAAM,MACN,GAAK,MACL,GAAK,MACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,MAET,GAAI,CACF,KAAO,KACP,IAAM,KACN,KAAO,MACP,IAAM,MACN,GAAK,MACL,GAAK,MACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,MAET,GAAI,CACF,KAAO,KACP,IAAM,KACN,KAAO,MACP,IAAM,MACN,GAAK,MACL,GAAK,MACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,GAAI,CACF,KAAO,KACP,IAAM,MACN,KAAO,KACP,IAAM,MACN,GAAK,MACL,GAAK,MACL,GAAK,KACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,GAAI,CACF,KAAO,MACP,IAAM,MACN,KAAO,MACP,IAAM,MACN,GAAK,MACL,GAAK,MACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,GAAI,CACF,KAAO,MACP,IAAM,KACN,KAAO,MACP,IAAM,MACN,GAAK,MACL,GAAK,MACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,GAAI,CACF,KAAO,MACP,IAAM,MACN,KAAO,MACP,IAAM,MACN,GAAK,MACL,GAAK,MACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,GAAI,CACF,KAAO,MACP,IAAM,MACN,KAAO,MACP,IAAM,MACN,GAAK,MACL,GAAK,MACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,GAAI,CACF,KAAO,MACP,IAAM,MACN,KAAO,MACP,IAAM,MACN,GAAK,MACL,GAAK,MACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,GAAI,CACF,KAAO,MACP,IAAM,MACN,KAAO,MACP,IAAM,MACN,GAAK,KACL,GAAK,MACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,GAAI,CACF,KAAO,MACP,IAAM,MACN,KAAO,MACP,IAAM,MACN,GAAK,MACL,GAAK,MACL,GAAK,MACL,IAAM,MACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,GAAI,CACF,KAAO,MACP,IAAM,MACN,KAAO,MACP,IAAM,MACN,GAAK,MACL,GAAK,MACL,GAAK,MACL,IAAM,KACN,KAAO,MACP,IAAM,MACN,KAAO,OAET,GAAI,CACF,KAAO,MACP,IAAM,MACN,KAAO,MACP,IAAM,MACN,GAAK,MACL,GAAK,MACL,GAAK,KACL,IAAM,MACN,KA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","file":"static/js/main.fb38f03a.chunk.js","sourcesContent":["export enum RNGOptions {\n  MiddleSquares = '1',\n  LinearCongruential = '2',\n  MixedCongruential = '3',\n  CombinedCongruential = '4',\n  MultiplicativeCongruential = '5',\n}\n","import { css } from '@mui/styled-engine';\n\nexport const divStyleRows = css({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: '16px',\n  '& > *': {\n    width: '100%',\n  },\n});\n\nexport const divStyleColumns = css({\n  display: 'flex',\n  flexDirection: 'row',\n  gap: '16px',\n  '& > *': {\n    width: '100%',\n  },\n  '@media (max-width: 550px)': {\n    flexDirection: 'column',\n  },\n});\n","/** @jsxImportSource @emotion/react */\nimport React from 'react';\nimport { css } from '@mui/styled-engine';\nimport { TextField } from '@mui/material';\n\nimport { InputValues } from '../Interfaces/data/types';\nimport { divStyleColumns } from '../styles/styles';\n\nconst rngInputsStyle = css({\n  ...divStyleColumns,\n  '& > *': {\n    flexGrow: 1,\n  },\n});\n\ninterface InputRNGProps {\n  inputValuesArr: InputValues[];\n  setInputValues: React.Dispatch<React.SetStateAction<InputValues[]>>;\n  index: number;\n  requiredByOption: string[];\n  validateCompleteInput: (\n    inputVals: InputValues[],\n    numOfRan?: string | undefined,\n  ) => void;\n  randomsListLength: number;\n}\n\nconst InputRNG = (props: InputRNGProps) => {\n  const labels: { [key: string]: string } = {\n    seed: 'Seed',\n    a: 'A',\n    c: 'C',\n    m: 'M',\n  };\n\n  const handleInputChange = (name: string, strNumber: string) => {\n    strNumber = strNumber.replace(/[ .]/g, '');\n    const number = Number(strNumber);\n    if (isNaN(number) && strNumber !== '') return;\n\n    const updatedArr = [...props.inputValuesArr];\n    let updatedObject = {\n      ...updatedArr[props.index],\n      [name]: strNumber,\n    };\n\n    updatedArr[props.index] = updatedObject;\n    props.setInputValues(updatedArr);\n\n    props.validateCompleteInput(updatedArr);\n  };\n\n  return (\n    <div css={[rngInputsStyle]}>\n      {props.requiredByOption.map((inputStr, index) => (\n        <TextField\n          key={`input-${index}-${inputStr}`}\n          label={labels[inputStr]}\n          variant='outlined'\n          value={props.inputValuesArr[props.index][inputStr]}\n          onChange={(event) => handleInputChange(inputStr, event.target.value)}\n          InputProps={{\n            readOnly: props.randomsListLength > 0,\n          }}\n          focused={\n            props.randomsListLength > 0\n              ? !(props.randomsListLength > 0)\n              : undefined\n          }\n          required\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default InputRNG;\n","/** @jsxImportSource @emotion/react */\nimport React from 'react';\nimport { css } from '@emotion/react';\nimport { FixedSizeList, ListChildComponentProps } from 'react-window';\nimport {\n  Button,\n  ListItem,\n  ListItemButton,\n  ListItemText,\n} from '@mui/material';\nimport { Box } from '@mui/system';\nimport { CSVLink } from 'react-csv';\n\nconst RandomsListDiv = css({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: '16px',\n});\n\nconst RandomsListBox = css({\n  border: '1px solid #ccc',\n  borderRadius: '4px',\n  '&:hover': {\n    border: '1px solid black',\n  },\n});\n\ninterface RandomsListProps {\n  numsList: number[];\n}\n\nconst RandomsList = (props: RandomsListProps) => {\n  const rowHeight = 30;\n\n  const renderRow = (rowProps: ListChildComponentProps) => {\n    const { index, style } = rowProps;\n\n    return (\n      <ListItem style={style} key={index} component='div' disablePadding>\n        <ListItemButton\n          style={{ height: `${rowHeight}px` }}\n          onClick={() => {\n            navigator.clipboard.writeText(String(props.numsList[index]));\n          }}\n        >\n          <ListItemText primary={props.numsList[index]} />\n        </ListItemButton>\n      </ListItem>\n    );\n  };\n\n  return (\n    <div css={RandomsListDiv}>\n      <Box css={RandomsListBox}>\n        <FixedSizeList\n          height={Math.min(300, props.numsList.length * 30)}\n          width='100%'\n          itemSize={rowHeight}\n          itemCount={props.numsList.length}\n          overscanCount={10}\n        >\n          {renderRow}\n        </FixedSizeList>\n      </Box>\n\n      <CSVLink\n        data={[['Randoms'], ...props.numsList.map((random) => [random])]}\n        filename='randoms.csv'\n        style={{ textDecoration: 'none' }}\n      >\n        <Button variant='outlined' fullWidth>\n          Save as CSV\n        </Button>\n      </CSVLink>\n    </div>\n  );\n};\n\nexport default RandomsList;\n","import { GeneratorValues, InputValues } from '../Interfaces/data/types';\n\nexport const convertInputToValues = (data: InputValues[]) => {\n  const transformedData: GeneratorValues[] = [];\n\n  data.forEach((valuesObj) => {\n    const newObj: { [key: string]: number | undefined } = {};\n\n    Object.keys(valuesObj).forEach((key) => {\n      const value = (valuesObj as any)[key];\n\n      if (value === '') return;\n\n      newObj[key] = Number(value);\n    });\n\n    transformedData.push(newObj);\n  });\n\n  return transformedData;\n};\n","export const chiSquareDistributionTable: {\n  [index: number]: { [index: number]: number };\n} = {\n  1: {\n    0.995: 0,\n    0.99: 0,\n    0.975: 0,\n    0.95: 0,\n    0.9: 0.02,\n    0.5: 0.45,\n    0.1: 2.71,\n    0.05: 3.84,\n    0.025: 5.02,\n    0.01: 6.63,\n    0.005: 7.88,\n  },\n  2: {\n    0.995: 0.01,\n    0.99: 0.02,\n    0.975: 0.05,\n    0.95: 0.1,\n    0.9: 0.21,\n    0.5: 1.39,\n    0.1: 4.61,\n    0.05: 5.99,\n    0.025: 7.38,\n    0.01: 9.21,\n    0.005: 10.6,\n  },\n  3: {\n    0.995: 0.07,\n    0.99: 0.11,\n    0.975: 0.22,\n    0.95: 0.35,\n    0.9: 0.58,\n    0.5: 2.37,\n    0.1: 6.25,\n    0.05: 7.81,\n    0.025: 9.35,\n    0.01: 11.34,\n    0.005: 12.84,\n  },\n  4: {\n    0.995: 0.21,\n    0.99: 0.3,\n    0.975: 0.48,\n    0.95: 0.71,\n    0.9: 1.06,\n    0.5: 3.36,\n    0.1: 7.78,\n    0.05: 9.49,\n    0.025: 11.14,\n    0.01: 13.28,\n    0.005: 14.86,\n  },\n  5: {\n    0.995: 0.41,\n    0.99: 0.55,\n    0.975: 0.83,\n    0.95: 1.15,\n    0.9: 1.61,\n    0.5: 4.35,\n    0.1: 9.24,\n    0.05: 11.07,\n    0.025: 12.83,\n    0.01: 15.09,\n    0.005: 16.75,\n  },\n  6: {\n    0.995: 0.68,\n    0.99: 0.87,\n    0.975: 1.24,\n    0.95: 1.64,\n    0.9: 2.2,\n    0.5: 5.35,\n    0.1: 10.65,\n    0.05: 12.59,\n    0.025: 14.45,\n    0.01: 16.81,\n    0.005: 18.55,\n  },\n  7: {\n    0.995: 0.99,\n    0.99: 1.25,\n    0.975: 1.69,\n    0.95: 2.17,\n    0.9: 2.83,\n    0.5: 6.35,\n    0.1: 12.02,\n    0.05: 14.07,\n    0.025: 16.01,\n    0.01: 18.48,\n    0.005: 20.28,\n  },\n  8: {\n    0.995: 1.34,\n    0.99: 1.65,\n    0.975: 2.18,\n    0.95: 2.73,\n    0.9: 3.49,\n    0.5: 7.34,\n    0.1: 13.36,\n    0.05: 15.51,\n    0.025: 17.53,\n    0.01: 20.09,\n    0.005: 21.96,\n  },\n  9: {\n    0.995: 1.73,\n    0.99: 2.09,\n    0.975: 2.7,\n    0.95: 3.33,\n    0.9: 4.17,\n    0.5: 8.34,\n    0.1: 14.68,\n    0.05: 16.92,\n    0.025: 19.02,\n    0.01: 21.67,\n    0.005: 23.59,\n  },\n  10: {\n    0.995: 2.16,\n    0.99: 2.56,\n    0.975: 3.25,\n    0.95: 3.94,\n    0.9: 4.87,\n    0.5: 9.34,\n    0.1: 15.99,\n    0.05: 18.31,\n    0.025: 20.48,\n    0.01: 23.21,\n    0.005: 25.19,\n  },\n  11: {\n    0.995: 2.6,\n    0.99: 3.05,\n    0.975: 3.82,\n    0.95: 4.57,\n    0.9: 5.58,\n    0.5: 10.34,\n    0.1: 17.28,\n    0.05: 19.68,\n    0.025: 21.92,\n    0.01: 24.72,\n    0.005: 26.76,\n  },\n  12: {\n    0.995: 3.07,\n    0.99: 3.57,\n    0.975: 4.4,\n    0.95: 5.23,\n    0.9: 6.3,\n    0.5: 11.34,\n    0.1: 18.55,\n    0.05: 21.03,\n    0.025: 23.34,\n    0.01: 26.22,\n    0.005: 28.3,\n  },\n  13: {\n    0.995: 3.57,\n    0.99: 4.11,\n    0.975: 5.01,\n    0.95: 5.89,\n    0.9: 7.04,\n    0.5: 12.34,\n    0.1: 19.81,\n    0.05: 22.36,\n    0.025: 24.74,\n    0.01: 27.69,\n    0.005: 29.82,\n  },\n  14: {\n    0.995: 4.07,\n    0.99: 4.66,\n    0.975: 5.63,\n    0.95: 6.57,\n    0.9: 7.79,\n    0.5: 13.34,\n    0.1: 21.06,\n    0.05: 23.68,\n    0.025: 26.12,\n    0.01: 29.14,\n    0.005: 31.32,\n  },\n  15: {\n    0.995: 4.6,\n    0.99: 5.23,\n    0.975: 6.27,\n    0.95: 7.26,\n    0.9: 8.55,\n    0.5: 14.34,\n    0.1: 22.31,\n    0.05: 25,\n    0.025: 27.49,\n    0.01: 30.58,\n    0.005: 32.8,\n  },\n  16: {\n    0.995: 5.14,\n    0.99: 5.81,\n    0.975: 6.91,\n    0.95: 7.96,\n    0.9: 9.31,\n    0.5: 15.34,\n    0.1: 23.54,\n    0.05: 26.3,\n    0.025: 28.85,\n    0.01: 32,\n    0.005: 34.27,\n  },\n  17: {\n    0.995: 5.7,\n    0.99: 6.41,\n    0.975: 7.56,\n    0.95: 8.67,\n    0.9: 10.09,\n    0.5: 16.34,\n    0.1: 24.77,\n    0.05: 27.59,\n    0.025: 30.19,\n    0.01: 33.41,\n    0.005: 35.72,\n  },\n  18: {\n    0.995: 6.26,\n    0.99: 7.01,\n    0.975: 8.23,\n    0.95: 9.39,\n    0.9: 10.87,\n    0.5: 17.34,\n    0.1: 25.99,\n    0.05: 28.87,\n    0.025: 31.53,\n    0.01: 34.81,\n    0.005: 37.16,\n  },\n  19: {\n    0.995: 6.84,\n    0.99: 7.63,\n    0.975: 8.91,\n    0.95: 10.12,\n    0.9: 11.65,\n    0.5: 18.34,\n    0.1: 27.2,\n    0.05: 30.14,\n    0.025: 32.85,\n    0.01: 36.19,\n    0.005: 38.58,\n  },\n  20: {\n    0.995: 7.43,\n    0.99: 8.26,\n    0.975: 9.59,\n    0.95: 10.85,\n    0.9: 12.44,\n    0.5: 19.34,\n    0.1: 28.41,\n    0.05: 31.41,\n    0.025: 34.17,\n    0.01: 37.57,\n    0.005: 40,\n  },\n  21: {\n    0.995: 8.03,\n    0.99: 8.9,\n    0.975: 10.28,\n    0.95: 11.59,\n    0.9: 13.24,\n    0.5: 20.34,\n    0.1: 29.62,\n    0.05: 32.67,\n    0.025: 35.48,\n    0.01: 38.93,\n    0.005: 41.4,\n  },\n  22: {\n    0.995: 8.64,\n    0.99: 9.54,\n    0.975: 10.98,\n    0.95: 12.34,\n    0.9: 14.04,\n    0.5: 21.34,\n    0.1: 30.81,\n    0.05: 33.92,\n    0.025: 36.78,\n    0.01: 40.29,\n    0.005: 42.8,\n  },\n  23: {\n    0.995: 9.26,\n    0.99: 10.2,\n    0.975: 11.69,\n    0.95: 13.09,\n    0.9: 14.85,\n    0.5: 22.34,\n    0.1: 32.01,\n    0.05: 35.17,\n    0.025: 38.08,\n    0.01: 41.64,\n    0.005: 44.18,\n  },\n  24: {\n    0.995: 9.89,\n    0.99: 10.86,\n    0.975: 12.4,\n    0.95: 13.85,\n    0.9: 15.66,\n    0.5: 23.34,\n    0.1: 33.2,\n    0.05: 36.42,\n    0.025: 39.36,\n    0.01: 42.98,\n    0.005: 45.56,\n  },\n  25: {\n    0.995: 10.52,\n    0.99: 11.52,\n    0.975: 13.12,\n    0.95: 14.61,\n    0.9: 16.47,\n    0.5: 24.34,\n    0.1: 34.28,\n    0.05: 37.65,\n    0.025: 40.65,\n    0.01: 44.31,\n    0.005: 46.93,\n  },\n  26: {\n    0.995: 11.16,\n    0.99: 12.2,\n    0.975: 13.84,\n    0.95: 15.38,\n    0.9: 17.29,\n    0.5: 25.34,\n    0.1: 35.56,\n    0.05: 38.89,\n    0.025: 41.92,\n    0.01: 45.64,\n    0.005: 48.29,\n  },\n  27: {\n    0.995: 11.81,\n    0.99: 12.88,\n    0.975: 14.57,\n    0.95: 16.15,\n    0.9: 18.11,\n    0.5: 26.34,\n    0.1: 36.74,\n    0.05: 40.11,\n    0.025: 43.19,\n    0.01: 46.96,\n    0.005: 49.65,\n  },\n  28: {\n    0.995: 12.46,\n    0.99: 13.57,\n    0.975: 15.31,\n    0.95: 16.93,\n    0.9: 18.94,\n    0.5: 27.34,\n    0.1: 37.92,\n    0.05: 41.34,\n    0.025: 44.46,\n    0.01: 48.28,\n    0.005: 50.99,\n  },\n  29: {\n    0.995: 13.12,\n    0.99: 14.26,\n    0.975: 16.05,\n    0.95: 17.71,\n    0.9: 19.77,\n    0.5: 28.34,\n    0.1: 39.09,\n    0.05: 42.56,\n    0.025: 45.72,\n    0.01: 49.59,\n    0.005: 52.34,\n  },\n  30: {\n    0.995: 13.79,\n    0.99: 14.95,\n    0.975: 16.79,\n    0.95: 18.49,\n    0.9: 20.6,\n    0.5: 29.34,\n    0.1: 40.26,\n    0.05: 43.77,\n    0.025: 46.98,\n    0.01: 50.89,\n    0.005: 53.67,\n  },\n  40: {\n    0.995: 20.71,\n    0.99: 22.16,\n    0.975: 24.43,\n    0.95: 26.51,\n    0.9: 29.05,\n    0.5: 39.34,\n    0.1: 51.81,\n    0.05: 55.76,\n    0.025: 59.34,\n    0.01: 63.69,\n    0.005: 66.77,\n  },\n  50: {\n    0.995: 27.99,\n    0.99: 29.71,\n    0.975: 32.36,\n    0.95: 34.76,\n    0.9: 37.69,\n    0.5: 49.33,\n    0.1: 63.17,\n    0.05: 67.5,\n    0.025: 71.42,\n    0.01: 76.15,\n    0.005: 79.49,\n  },\n  60: {\n    0.995: 35.53,\n    0.99: 37.48,\n    0.975: 40.48,\n    0.95: 43.19,\n    0.9: 46.46,\n    0.5: 59.33,\n    0.1: 74.4,\n    0.05: 79.08,\n    0.025: 83.3,\n    0.01: 88.38,\n    0.005: 91.95,\n  },\n  70: {\n    0.995: 43.28,\n    0.99: 45.44,\n    0.975: 48.76,\n    0.95: 51.74,\n    0.9: 55.33,\n    0.5: 69.33,\n    0.1: 85.53,\n    0.05: 90.53,\n    0.025: 95.02,\n    0.01: 100.42,\n    0.005: 104.22,\n  },\n  80: {\n    0.995: 51.17,\n    0.99: 53.54,\n    0.975: 57.15,\n    0.95: 60.39,\n    0.9: 64.28,\n    0.5: 79.33,\n    0.1: 96.58,\n    0.05: 101.88,\n    0.025: 106.63,\n    0.01: 112.33,\n    0.005: 116.32,\n  },\n  90: {\n    0.995: 59.2,\n    0.99: 61.75,\n    0.975: 65.65,\n    0.95: 69.13,\n    0.9: 73.29,\n    0.5: 89.33,\n    0.1: 107.57,\n    0.05: 113.14,\n    0.025: 118.14,\n    0.01: 124.12,\n    0.005: 128.3,\n  },\n  100: {\n    0.995: 67.33,\n    0.99: 70.06,\n    0.975: 74.22,\n    0.95: 77.93,\n    0.9: 82.36,\n    0.5: 99.33,\n    0.1: 118.5,\n    0.05: 124.34,\n    0.025: 129.56,\n    0.01: 135.81,\n    0.005: 140.17,\n  },\n};\n","import {\n  ChiSquareData,\n  ChiSquareCell,\n} from '../../Interfaces/Validators/ChiSquareData';\nimport { Validator } from '../../Interfaces/Validators/Validator';\nimport { chiSquareDistributionTable } from '../../utils/ChiSquareCritical';\n\nexport const ChiSquare: Validator = class ChiSquare {\n  public static range: number;\n  private static k: number;\n  private static classes: number;\n  private static table: ChiSquareCell[];\n  private static X0: number;\n  private static X1: number;\n\n  public static validate = async (\n    randoms: number[],\n    alpha: number,\n  ): Promise<ChiSquareData> => {\n    if (randoms.length <= 4 || !(alpha in chiSquareDistributionTable[1])) {\n      return Promise.reject(\n        'Not enough information provided to make the validation',\n      );\n    }\n\n    this.table = [];\n    this.range = randoms[randoms.length - 1] - randoms[0];\n    this.k = Math.floor(1 + 3.322 * Math.log10(randoms.length));\n    this.classes = 1 / this.k;\n    this.createTable(randoms);\n    if (this.k === 1) {\n      return Promise.reject(\n        'The randoms are not enough to validate the distribution',\n      );\n    }\n    this.getTheoreticalValue(alpha);\n\n    const data: ChiSquareData = {\n      isValid: this.X0 < this.X1,\n      range: this.range,\n      k: this.k,\n      classes: this.classes,\n      table: this.table,\n      X0: this.X0,\n      X1: this.X1,\n    };\n    return data;\n  };\n\n  private static createTable = (randoms: number[]) => {\n    let i = 0;\n    let j = 0;\n    this.X0 = 0;\n    while (i < this.k) {\n      let start = i * this.classes;\n      let end = (i + 1) * this.classes;\n      let absolute = 0;\n      while (randoms[j] <= end) {\n        absolute++;\n        j++;\n        if (j < randoms.length && randoms[j] > end && absolute < 5) {\n          i++;\n          end = (i + 1) * this.classes;\n        }\n      }\n      if (absolute < 5 && i >= this.k - 1) {\n        const last = this.table.pop();\n        start = last!.start;\n        absolute += last!.absolute;\n      }\n      const probability = end - start;\n      const theoretical = randoms.length * probability;\n      const result = Math.pow(absolute - theoretical, 2) / theoretical;\n      const cell: ChiSquareCell = {\n        start: start,\n        end: end,\n        absolute: absolute,\n        probability: probability,\n        theoretical: theoretical,\n        result: result,\n      };\n      this.table.push(cell);\n      this.X0 += cell.result;\n      i++;\n    }\n    this.k = this.table.length;\n  };\n\n  private static getTheoreticalValue = (alpha: number) => {\n    const v = this.k - 1;\n    this.X1 = chiSquareDistributionTable[v][alpha];\n  };\n};\n","export const ksDistributionTable: {\n  [index: number]: { [index: number]: number };\n} = {\n  1: {\n    0.2: 0.9,\n    0.1: 0.95,\n    0.05: 0.975,\n    0.02: 0.99,\n    0.01: 0.995,\n    0.005: 0.9975,\n    0.002: 0.999,\n    0.001: 0.9995,\n  },\n\n  2: {\n    0.2: 0.68337,\n    0.1: 0.77639,\n    0.05: 0.84189,\n    0.02: 0.9,\n    0.01: 0.92929,\n    0.005: 0.95,\n    0.002: 0.96838,\n    0.001: 0.97764,\n  },\n\n  3: {\n    0.2: 0.56481,\n    0.1: 0.63604,\n    0.05: 0.7076,\n    0.02: 0.78456,\n    0.01: 0.829,\n    0.005: 0.86428,\n    0.002: 0.9,\n    0.001: 0.92065,\n  },\n\n  4: {\n    0.2: 0.49265,\n    0.1: 0.56522,\n    0.05: 0.62394,\n    0.02: 0.68887,\n    0.01: 0.73424,\n    0.005: 0.77639,\n    0.002: 0.82217,\n    0.001: 0.85047,\n  },\n\n  5: {\n    0.2: 0.44698,\n    0.1: 0.50945,\n    0.05: 0.56328,\n    0.02: 0.62718,\n    0.01: 0.66853,\n    0.005: 0.70543,\n    0.002: 0.75,\n    0.001: 0.78137,\n  },\n\n  6: {\n    0.2: 0.41037,\n    0.1: 0.46799,\n    0.05: 0.51926,\n    0.02: 0.5774,\n    0.01: 0.61661,\n    0.005: 0.65287,\n    0.002: 0.69571,\n    0.001: 0.72479,\n  },\n\n  7: {\n    0.2: 0.38148,\n    0.1: 0.43607,\n    0.05: 0.48342,\n    0.02: 0.53844,\n    0.01: 0.57581,\n    0.005: 0.60975,\n    0.002: 0.65071,\n    0.001: 0.6793,\n  },\n\n  8: {\n    0.2: 0.35831,\n    0.1: 0.40962,\n    0.05: 0.45427,\n    0.02: 0.50654,\n    0.01: 0.54179,\n    0.005: 0.57429,\n    0.002: 0.61368,\n    0.001: 0.64098,\n  },\n\n  9: {\n    0.2: 0.3391,\n    0.1: 0.38746,\n    0.05: 0.43001,\n    0.02: 0.4796,\n    0.01: 0.51332,\n    0.005: 0.54443,\n    0.002: 0.5821,\n    0.001: 0.60846,\n  },\n\n  10: {\n    0.2: 0.3226,\n    0.1: 0.36866,\n    0.05: 0.40925,\n    0.02: 0.45562,\n    0.01: 0.48893,\n    0.005: 0.51872,\n    0.002: 0.555,\n    0.001: 0.58042,\n  },\n\n  11: {\n    0.2: 0.30829,\n    0.1: 0.35242,\n    0.05: 0.39122,\n    0.02: 0.4367,\n    0.01: 0.4677,\n    0.005: 0.49539,\n    0.002: 0.53135,\n    0.001: 0 - 55588,\n  },\n\n  12: {\n    0.2: 0.29577,\n    0.1: 0.33815,\n    0.05: 0.37543,\n    0.02: 0.41918,\n    0.01: 0.44905,\n    0.005: 0.47672,\n    0.002: 0.51047,\n    0.001: 0.53422,\n  },\n\n  13: {\n    0.2: 0.2847,\n    0.1: 0.32549,\n    0.05: 0.36143,\n    0.02: 0.40362,\n    0.01: 0.43247,\n    0.005: 0.45921,\n    0.002: 0.49189,\n    0.001: 0.5149,\n  },\n\n  14: {\n    0.2: 0.27481,\n    0.1: 0.31417,\n    0.05: 0.3489,\n    0.02: 0.3897,\n    0.01: 0.41762,\n    0.005: 0.44352,\n    0.002: 0.4752,\n    0.001: 0.49753,\n  },\n\n  15: {\n    0.2: 0.26589,\n    0.1: 0.30397,\n    0.05: 0.3375,\n    0.02: 0.37713,\n    0.01: 0.4042,\n    0.005: 0.42934,\n    0.002: 0.45611,\n    0.001: 0.48182,\n  },\n\n  16: {\n    0.2: 0.25778,\n    0.1: 0.29472,\n    0.05: 0.32733,\n    0.02: 0.36571,\n    0.01: 0.39201,\n    0.005: 0.41644,\n    0.002: 0.44637,\n    0.001: 0.4675,\n  },\n\n  17: {\n    0.2: 0.25039,\n    0.1: 0.28627,\n    0.05: 0.31796,\n    0.02: 0.35528,\n    0.01: 0.38086,\n    0.005: 0.40464,\n    0.002: 0.4338,\n    0.001: 0.4554,\n  },\n\n  18: {\n    0.2: 0.2436,\n    0.1: 0.27851,\n    0.05: 0.30936,\n    0.02: 0.34569,\n    0.01: 0.37062,\n    0.005: 0.3938,\n    0.002: 0.42224,\n    0.001: 0.44234,\n  },\n\n  19: {\n    0.2: 0.23735,\n    0.1: 0.27136,\n    0.05: 0.30143,\n    0.02: 0.33685,\n    0.01: 0.36117,\n    0.005: 0.38379,\n    0.002: 0.41156,\n    0.001: 0.43119,\n  },\n\n  20: {\n    0.2: 0.23156,\n    0.1: 0.26473,\n    0.05: 0.29408,\n    0.02: 0.32866,\n    0.01: 0.35241,\n    0.005: 0.37451,\n    0.002: 0.40165,\n    0.001: 0.42085,\n  },\n\n  21: {\n    0.2: 0.22517,\n    0.1: 0.25858,\n    0.05: 0.28724,\n    0.02: 0.32104,\n    0.01: 0.34426,\n    0.005: 0.36588,\n    0.002: 0.39243,\n    0.001: 0.41122,\n  },\n\n  22: {\n    0.2: 0.22115,\n    0.1: 0.25283,\n    0.05: 0.28087,\n    0.02: 0.31394,\n    0.01: 0.33666,\n    0.005: 0.35782,\n    0.002: 0.38382,\n    0.001: 0.40223,\n  },\n\n  23: {\n    0.2: 0.21646,\n    0.1: 0.24746,\n    0.05: 0.2749,\n    0.02: 0.30728,\n    0.01: 0.32954,\n    0.005: 0.35027,\n    0.002: 0.37575,\n    0.001: 0.3938,\n  },\n\n  24: {\n    0.2: 0.21205,\n    0.1: 0.24242,\n    0.05: 0.26931,\n    0.02: 0.30104,\n    0.01: 0.32286,\n    0.005: 0.34318,\n    0.002: 0.36787,\n    0.001: 0.38588,\n  },\n\n  25: {\n    0.2: 0.2079,\n    0.1: 0.23768,\n    0.05: 0.26404,\n    0.02: 0.29518,\n    0.01: 0.31657,\n    0.005: 0.33651,\n    0.002: 0.36104,\n    0.001: 0.37743,\n  },\n\n  26: {\n    0.2: 0.20399,\n    0.1: 0.2332,\n    0.05: 0.25908,\n    0.02: 0.28962,\n    0.01: 0.30963,\n    0.005: 0.33022,\n    0.002: 0.35431,\n    0.001: 0.37139,\n  },\n\n  27: {\n    0.2: 0.2003,\n    0.1: 0.22898,\n    0.05: 0.25438,\n    0.02: 0.28438,\n    0.01: 0.30502,\n    0.005: 0.32425,\n    0.002: 0.34794,\n    0.001: 0.36473,\n  },\n\n  28: {\n    0.2: 0.1968,\n    0.1: 0.22497,\n    0.05: 0.24993,\n    0.02: 0.27942,\n    0.01: 0.29971,\n    0.005: 0.31862,\n    0.002: 0.3419,\n    0.001: 0.35842,\n  },\n\n  29: {\n    0.2: 0.19348,\n    0.1: 0.22117,\n    0.05: 0.24571,\n    0.02: 0.27471,\n    0.01: 0.29466,\n    0.005: 0.31327,\n    0.002: 0.33617,\n    0.001: 0.35242,\n  },\n\n  30: {\n    0.2: 0.19032,\n    0.1: 0.21756,\n    0.05: 0.2417,\n    0.02: 0.27023,\n    0.01: 0.28986,\n    0.005: 0.30818,\n    0.002: 0.33072,\n    0.001: 0.34672,\n  },\n\n  31: {\n    0.2: 0.18732,\n    0.1: 0.21412,\n    0.05: 0.23788,\n    0.02: 0.26596,\n    0.01: 0.28529,\n    0.005: 0.30333,\n    0.002: 0.32553,\n    0.001: 0.34129,\n  },\n\n  32: {\n    0.2: 0.18445,\n    0.1: 0.21085,\n    0.05: 0.23424,\n    0.02: 0.26189,\n    0.01: 0.28094,\n    0.005: 0.2987,\n    0.002: 0.32058,\n    0.001: 0.33611,\n  },\n\n  33: {\n    0.2: 0.18171,\n    0.1: 0.20771,\n    0.05: 0.23076,\n    0.02: 0.25801,\n    0.01: 0.27577,\n    0.005: 0.29428,\n    0.002: 0.31584,\n    0.001: 0.33115,\n  },\n\n  34: {\n    0.2: 0.17909,\n    0.1: 0.21472,\n    0.05: 0.22743,\n    0.02: 0.25429,\n    0.01: 0.27271,\n    0.005: 0.29005,\n    0.002: 0.31131,\n    0.001: 0.32641,\n  },\n\n  35: {\n    0.2: 0.17659,\n    0.1: 0.20185,\n    0.05: 0.22425,\n    0.02: 0.25073,\n    0.01: 0.26897,\n    0.005: 0.286,\n    0.002: 0.30597,\n    0.001: 0.32187,\n  },\n\n  36: {\n    0.2: 0.17418,\n    0.1: 0.1991,\n    0.05: 0.22119,\n    0.02: 0.24732,\n    0.01: 0.26532,\n    0.005: 0.28211,\n    0.002: 0.30281,\n    0.001: 0.31751,\n  },\n\n  37: {\n    0.2: 0.17188,\n    0.1: 0.19646,\n    0.05: 0.21826,\n    0.02: 0.24404,\n    0.01: 0.2618,\n    0.005: 0.27838,\n    0.002: 0.29882,\n    0.001: 0.31333,\n  },\n\n  38: {\n    0.2: 0.16966,\n    0.1: 0.19392,\n    0.05: 0.21544,\n    0.02: 0.24089,\n    0.01: 0.25843,\n    0.005: 0.27483,\n    0.002: 0.29498,\n    0.001: 0.30931,\n  },\n\n  39: {\n    0.2: 0.16753,\n    0.1: 0.19148,\n    0.05: 0.21273,\n    0.02: 0.23785,\n    0.01: 0.25518,\n    0.005: 0.27135,\n    0.002: 0.29125,\n    0.001: 0.30544,\n  },\n  40: {\n    0.2: 0.16547,\n    0.1: 0.18913,\n    0.05: 0.21012,\n    0.02: 0.23494,\n    0.01: 0.25205,\n    0.005: 0.26803,\n    0.002: 0.28772,\n    0.001: 0.30171,\n  },\n  41: {\n    0.2: 0.16349,\n    0.1: 0.18687,\n    0.05: 0.2076,\n    0.02: 0.23213,\n    0.01: 0.24904,\n    0.005: 0.26482,\n    0.002: 0.28429,\n    0.001: 0.29811,\n  },\n\n  42: {\n    0.2: 0.16158,\n    0.1: 0.18468,\n    0.05: 0.20517,\n    0.02: 0.22941,\n    0.01: 0.24613,\n    0.005: 0.26173,\n    0.002: 0.28097,\n    0.001: 0.29465,\n  },\n\n  43: {\n    0.2: 0.15974,\n    0.1: 0.18257,\n    0.05: 0.20283,\n    0.02: 0.22679,\n    0.01: 0.24332,\n    0.005: 0.25875,\n    0.002: 0.27778,\n    0.001: 0.2913,\n  },\n\n  44: {\n    0.2: 0.15795,\n    0.1: 0.18051,\n    0.05: 0.20056,\n    0.02: 0.22426,\n    0.01: 0.2406,\n    0.005: 0.25587,\n    0.002: 0.27468,\n    0.001: 0.28806,\n  },\n\n  45: {\n    0.2: 0.15623,\n    0.1: 0.17856,\n    0.05: 0.19837,\n    0.02: 0.22181,\n    0.01: 0.23798,\n    0.005: 0.25308,\n    0.002: 0.27169,\n    0.001: 0.28493,\n  },\n\n  46: {\n    0.2: 0.15457,\n    0.1: 0.17665,\n    0.05: 0.19625,\n    0.02: 0.21944,\n    0.01: 0.23544,\n    0.005: 0.25038,\n    0.002: 0.2688,\n    0.001: 0.2819,\n  },\n\n  47: {\n    0.2: 0.15295,\n    0.1: 0.17481,\n    0.05: 0.1942,\n    0.02: 0.21715,\n    0.01: 0.23298,\n    0.005: 0.24776,\n    0.002: 0.266,\n    0.001: 0.27896,\n  },\n\n  48: {\n    0.2: 0.15139,\n    0.1: 0.17301,\n    0.05: 0.19221,\n    0.02: 0.21493,\n    0.01: 0.23059,\n    0.005: 0.24523,\n    0.002: 0.26328,\n    0.001: 0.27611,\n  },\n\n  49: {\n    0.2: 0.14987,\n    0.1: 0.17128,\n    0.05: 0.19028,\n    0.02: 0.21281,\n    0.01: 0.22832,\n    0.005: 0.24281,\n    0.002: 0.26069,\n    0.001: 0.27339,\n  },\n\n  50: {\n    0.2: 0.1484,\n    0.1: 0.16959,\n    0.05: 0.18841,\n    0.02: 0.21068,\n    0.01: 0.22604,\n    0.005: 0.24039,\n    0.002: 0.25809,\n    0.001: 0.27067,\n  },\n};\n","import {\n  KolmogorovSmirnovCell,\n  KolmogorovSmirnovData,\n} from '../../Interfaces/Validators/KolmogorovSmirnovData';\nimport { Validator } from '../../Interfaces/Validators/Validator';\nimport { ksDistributionTable } from '../../utils/KolmogorovSmirnovCritical';\n\nexport const KolmogorovSmirnov: Validator = class KolmogorovSmirnov {\n  private static table: KolmogorovSmirnovCell[];\n  private static deviation_max_plus: number;\n  private static deviation_max_minus: number;\n  private static deviation_max: number;\n  private static deviation_critical: number;\n\n  public static validate = async (\n    randoms: number[],\n    alpha: number,\n  ): Promise<KolmogorovSmirnovData> => {\n    if (randoms.length < 1 || !(alpha in ksDistributionTable[1])) {\n      return Promise.reject(\n        'Not enough information provided to make the validation',\n      );\n    }\n\n    this.table = [];\n    this.deviation_max_plus = 0;\n    this.deviation_max_minus = 0;\n    this.deviation_max = 0;\n    this.createTable(randoms);\n    this.getTheoreticalValue(alpha);\n\n    const data: KolmogorovSmirnovData = {\n      isValid: this.deviation_max < this.deviation_critical,\n      table: this.table,\n      deviation_max_plus: this.deviation_max_plus,\n      deviation_max_minus: this.deviation_max_minus,\n      deviation_max: this.deviation_max,\n      deviation_critical: this.deviation_critical,\n    };\n    return data;\n  };\n\n  private static createTable = (randoms: number[]) => {\n    let i = 1;\n    const n = randoms.length;\n    randoms.forEach((rnd) => {\n      const cdf = rnd;\n      const cdf_empirical = i / n;\n      const deviation_plus = Math.abs(cdf_empirical - cdf);\n      const deviation_minus =\n        i !== 1 ? Math.abs(cdf - this.table[i - 2].cdf_empirical) : cdf;\n\n      const cell: KolmogorovSmirnovCell = {\n        cdf: cdf,\n        cdf_empirical: cdf_empirical,\n        deviation_plus: deviation_plus,\n        deviation_minus: deviation_minus,\n      };\n      this.table.push(cell);\n\n      this.deviation_max_plus = Math.max(\n        this.deviation_max_plus,\n        deviation_plus,\n      );\n\n      this.deviation_max_minus = Math.max(\n        this.deviation_max_minus,\n        deviation_minus,\n      );\n\n      this.deviation_max = Math.max(\n        this.deviation_max_plus,\n        this.deviation_max_minus,\n      );\n      i++;\n    });\n  };\n\n  private static getTheoreticalValue = (alpha: number) => {\n    const n = this.table.length;\n    if (n > 50) {\n      switch (alpha) {\n        case 0.2:\n          return 1.07 / Math.sqrt(n);\n        case 0.1:\n          return 1.22 / Math.sqrt(n);\n        case 0.05:\n          return 1.36 / Math.sqrt(n);\n        case 0.02:\n          return 1.52 / Math.sqrt(n);\n        case 0.01:\n          return 1.63 / Math.sqrt(n);\n        case 0.005:\n          return 1.73 / Math.sqrt(n);\n        case 0.002:\n          return 1.85 / Math.sqrt(n);\n        case 0.001:\n          return 1.95 / Math.sqrt(n);\n      }\n    }\n    this.deviation_critical = ksDistributionTable[n][alpha];\n  };\n};\n","import { ChiSquareData } from '../../Interfaces/Validators/ChiSquareData';\nimport { KolmogorovSmirnovData } from '../../Interfaces/Validators/KolmogorovSmirnovData';\nimport {\n  RandomGenerator,\n  RandomValidator,\n} from '../../Interfaces/Generators/RandomGenerator';\nimport { ChiSquare } from '../Validators/ChiSquare';\nimport { KolmogorovSmirnov } from '../Validators/KolmogorovSmirnov';\nimport { GeneratorValues } from '../../Interfaces/data/types';\n\ninterface ILinearCongruential extends RandomGenerator, RandomValidator {}\n\nexport const LinearCongruential: ILinearCongruential = class LinearCongruenial {\n  private static randoms: number[];\n\n  private static validateInput = (values: GeneratorValues) => {\n    return (\n      values &&\n      values.seed &&\n      values.seed > 0 &&\n      values.a &&\n      values.a > 0 &&\n      values.c &&\n      values.c > 0 &&\n      values.m &&\n      values.m > 0\n    );\n  };\n\n  public static generateRandoms = async (\n    values: GeneratorValues,\n    n?: number,\n  ): Promise<number[]> => {\n    if (!this.validateInput(values) || (n && n <= 0))\n      return Promise.reject('The parameters are not valid');\n\n    this.randoms = [];\n    let set = new Set();\n    let rnd = values.seed;\n    while (!set.has(rnd)) {\n      this.randoms.push(rnd! / values.m!);\n      set.add(rnd);\n      rnd = (values.a! * rnd! + values.c!) % values.m!;\n      if (n && this.randoms.length === n) return this.randoms;\n    }\n    return this.randoms;\n  };\n\n  public static getRandoms = (): number[] => {\n    if (!this.randoms) return [];\n    return this.randoms;\n  };\n\n  public static validate = async (\n    type: 'CS' | 'KS',\n    alpha: number,\n  ): Promise<ChiSquareData | KolmogorovSmirnovData> => {\n    if (!this.randoms)\n      return Promise.reject(\n        'To validate the randoms you need to generate them first',\n      );\n    return type === 'CS'\n      ? ChiSquare.validate(this.randoms.sort(), alpha)\n      : KolmogorovSmirnov.validate(this.randoms.sort(), alpha);\n  };\n};\n","import { ChiSquareData } from '../../Interfaces/Validators/ChiSquareData';\nimport { KolmogorovSmirnovData } from '../../Interfaces/Validators/KolmogorovSmirnovData';\nimport {\n  RandomGenerator,\n  RandomValidator,\n} from '../../Interfaces/Generators/RandomGenerator';\nimport { ChiSquare } from '../Validators/ChiSquare';\nimport { KolmogorovSmirnov } from '../Validators/KolmogorovSmirnov';\nimport { GeneratorValues } from '../../Interfaces/data/types';\n\ninterface IMultiplicativeCongruential\n  extends RandomGenerator,\n    RandomValidator {}\n\nexport const MultiplicativeCongruential: IMultiplicativeCongruential = class MultiplicativeCongruential {\n  private static randoms: number[];\n\n  private static validateInput = (values: GeneratorValues) => {\n    return (\n      values &&\n      values.seed &&\n      values.seed > 0 &&\n      values.a &&\n      values.a > 0 &&\n      !values.c &&\n      values.m &&\n      values.m > 0 &&\n      values.m > values.a &&\n      values.m > values.seed\n    );\n  };\n\n  public static generateRandoms = async (\n    values: GeneratorValues,\n    n?: number,\n  ): Promise<number[]> => {\n    if (!this.validateInput(values) || (n && n <= 0))\n      return Promise.reject('The parameters are not valid');\n\n    this.randoms = [];\n    let set = new Set();\n    let rnd = values.seed;\n    while (!set.has(rnd)) {\n      this.randoms.push(rnd! / values.m!);\n      set.add(rnd);\n      rnd = (values.a! * rnd!) % values.m!;\n      if (n && this.randoms.length === n) return this.randoms;\n    }\n    return this.randoms;\n  };\n\n  public static getRandoms = (): number[] => {\n    if (!this.randoms) return [];\n    return this.randoms;\n  };\n\n  public static validate = async (\n    type: 'CS' | 'KS',\n    alpha: number,\n  ): Promise<ChiSquareData | KolmogorovSmirnovData> => {\n    if (!this.randoms)\n      return Promise.reject(\n        'To validate the randoms you need to generate them first',\n      );\n    return type === 'CS'\n      ? ChiSquare.validate(this.randoms.sort(), alpha)\n      : KolmogorovSmirnov.validate(this.randoms.sort(), alpha);\n  };\n};\n","import { GeneratorValues } from '../../Interfaces/data/types';\nimport { RandomGenerator } from '../../Interfaces/Generators/RandomGenerator';\nimport { MultiplicativeCongruential } from './MultiplicativeCongruential';\n\nexport const CombinedCongruential: RandomGenerator = class CombinedCongruential {\n  private static randoms: number[];\n\n  private static validateInput = (values: GeneratorValues[]) => {\n    if (!values || values.length < 2) return false;\n    for (const val of values) {\n      if (\n        !val ||\n        !val.seed ||\n        val.seed <= 0 ||\n        !val.a ||\n        val.a <= 0 ||\n        val.c !== undefined ||\n        !val.m ||\n        val.m <= 0\n      ) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  public static generateRandoms = async (\n    values: GeneratorValues[],\n    n?: number,\n  ): Promise<number[]> => {\n    if (!this.validateInput(values) || (n && n <= 0)) {\n      return Promise.reject('The parameters are not valid');\n    }\n    this.randoms = [];\n    const k = values.length;\n    const gen_rnds: number[][] = [];\n    for (let i = 0; i < k; i++) {\n      await MultiplicativeCongruential.generateRandoms(values[i]).then(\n        (rnds) => {\n          rnds = rnds.map((rnd) => {\n            return rnd * values[i].m!;\n          });\n          gen_rnds.push(rnds);\n        },\n        (error) => {\n          return Promise.reject(error);\n        },\n      );\n    }\n\n    let period = 1;\n    let mod = 0;\n    values.forEach((val) => {\n      period *= val.m! - 1;\n      mod = Math.max(mod, val.m!);\n    });\n    period /= Math.pow(2, k - 1);\n    let i = 0;\n    while (i < period) {\n      let rnd = this.getNextRandom(gen_rnds, i, mod, k);\n      this.randoms.push(rnd > 0 ? rnd / mod : (mod - 1) / mod);\n      i++;\n      if (n && i === n) return this.randoms;\n    }\n    return this.randoms;\n  };\n\n  private static getNextRandom = (\n    gen_rnds: number[][],\n    col: number,\n    mod: number,\n    k: number,\n  ) => {\n    let rnd = 0;\n    let mult = 1;\n    for (let j = 0; j < k; j++) {\n      rnd += mult * gen_rnds[j][col % gen_rnds[j].length];\n      mult *= -1;\n    }\n    return rnd >= 0 ? rnd % mod : (rnd % mod) + mod;\n  };\n\n  public static getRandoms = (): number[] => {\n    if (!this.randoms) return [];\n    return this.randoms;\n  };\n};\n","import { ChiSquareData } from '../../Interfaces/Validators/ChiSquareData';\nimport { KolmogorovSmirnovData } from '../../Interfaces/Validators/KolmogorovSmirnovData';\nimport {\n  RandomGenerator,\n  RandomValidator,\n} from '../../Interfaces/Generators/RandomGenerator';\nimport { ChiSquare } from '../Validators/ChiSquare';\nimport { KolmogorovSmirnov } from '../Validators/KolmogorovSmirnov';\nimport { GeneratorValues } from '../../Interfaces/data/types';\nimport { HullDobell } from '../../Interfaces/Validators/HullDobell';\n\ninterface IMixedCongruential extends RandomGenerator, RandomValidator {\n  validHullDobell(): HullDobell;\n}\n\nexport const MixedCongruential: IMixedCongruential = class MixedCongruential {\n  private static randoms: number[];\n  private static values: GeneratorValues;\n\n  private static validateInput = (values: GeneratorValues) => {\n    return (\n      values &&\n      values.seed &&\n      values.seed > 0 &&\n      values.a &&\n      values.a > 0 &&\n      values.c &&\n      values.c > 0 &&\n      values.m &&\n      values.m > 0\n    );\n  };\n\n  public static validHullDobell = (): HullDobell => {\n    let general = true;\n\n    const RelativePrimes = (\n      c: number,\n      m: number,\n    ): { areRelativePrimes: boolean } => {\n      let i = 2;\n      let limit = Math.min(c, m);\n      while (i <= limit) {\n        if (m % i === 0 && c % i === 0) {\n          general = false;\n          return { areRelativePrimes: false };\n        }\n        i++;\n      }\n      return { areRelativePrimes: true };\n    };\n\n    const PrimeDivision = (\n      a: number,\n      m: number,\n    ): { primeDivision: boolean } => {\n      const getPrimes = (m: number): number[] => {\n        var sieve = [],\n          i,\n          j,\n          primes = [];\n        for (i = 2; i <= m; ++i) {\n          if (!sieve[i]) {\n            if (m % i === 0) primes.push(i);\n            for (j = i << 1; j <= m; j += i) {\n              sieve[j] = true;\n            }\n          }\n        }\n        return primes;\n      };\n\n      const primes = getPrimes(m);\n\n      for (const prime of primes) {\n        if (m % prime === 0 && (a - 1) % prime !== 0) {\n          general = false;\n          return {\n            primeDivision: false,\n          };\n        }\n      }\n\n      return {\n        primeDivision: true,\n      };\n    };\n\n    const FourDivision = (\n      a: number,\n      m: number,\n    ): { mDivision: boolean; aDivision: boolean } => {\n      const mCheck = m % 4 === 0;\n      const aCheck = (a - 1) % 4 === 0;\n\n      if (mCheck && !aCheck) general = false;\n\n      return { mDivision: mCheck, aDivision: aCheck };\n    };\n\n    return {\n      rule1: RelativePrimes(this.values.c!, this.values.m!),\n      rule2: PrimeDivision(this.values.a!, this.values.m!),\n      rule3: FourDivision(this.values.a!, this.values.m!),\n      general: { check: general },\n    };\n  };\n\n  public static generateRandoms = async (\n    values: GeneratorValues,\n    n?: number,\n  ): Promise<number[]> => {\n    this.values = values;\n\n    if (!this.validateInput(values) || (n && n <= 0))\n      return Promise.reject('The parameters are not valid');\n\n    this.randoms = [];\n    let set = new Set();\n    let rnd = values.seed;\n    while (!set.has(rnd)) {\n      this.randoms.push(rnd! / values.m!);\n      set.add(rnd);\n      rnd = (values.a! * rnd! + values.c!) % values.m!;\n      if (n && this.randoms.length === n) return this.randoms;\n    }\n    return this.randoms;\n  };\n\n  public static getRandoms = (): number[] => {\n    if (!this.randoms) return [];\n    return this.randoms;\n  };\n\n  public static validate = async (\n    type: 'CS' | 'KS',\n    alpha: number,\n  ): Promise<ChiSquareData | KolmogorovSmirnovData> => {\n    if (!this.randoms)\n      return Promise.reject(\n        'To validate the randoms you need to generate them first',\n      );\n    return type === 'CS'\n      ? ChiSquare.validate(this.randoms.sort(), alpha)\n      : KolmogorovSmirnov.validate(this.randoms.sort(), alpha);\n  };\n};\n","import { GeneratorValues } from '../../Interfaces/data/types';\nimport { RandomGenerator } from '../../Interfaces/Generators/RandomGenerator';\n\nexport const MiddleSquares: RandomGenerator = class MiddleSquares {\n  private static randoms: number[];\n\n  private static validateInput = (values: GeneratorValues) => {\n    return (\n      values &&\n      values.seed &&\n      values.seed > 0 &&\n      !values.a &&\n      !values.c &&\n      !values.m\n    );\n  };\n\n  public static generateRandoms = async (\n    values: GeneratorValues,\n    n?: number,\n  ): Promise<number[]> => {\n    if (!this.validateInput(values) || (n && n <= 0))\n      return Promise.reject('The parameters are not valid');\n\n    this.randoms = [];\n    let set = new Set();\n    let rnd = values.seed;\n    while (!set.has(rnd)) {\n      this.randoms.push(rnd! / 10000);\n      set.add(rnd);\n      rnd = this.getNextRandom(rnd!);\n      if (n && this.randoms.length === n) return this.randoms;\n    }\n    return this.randoms;\n  };\n\n  public static getRandoms = (): number[] => {\n    if (!this.randoms) return [];\n    return this.randoms;\n  };\n\n  private static getNextRandom = (seed: number): number => {\n    let square: String = '' + Math.pow(seed, 2);\n    while (square.length < 8) square = '0' + square;\n    return Number(square.substr(2, 4));\n  };\n};\n","/** @jsxImportSource @emotion/react */\nimport React from 'react';\nimport { css } from '@mui/styled-engine';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Button,\n  TextField,\n} from '@mui/material';\nimport { CSVLink } from 'react-csv';\n\nimport { divStyleColumns, divStyleRows } from '../styles/styles';\nimport { KolmogorovSmirnovData } from '../Interfaces/Validators/KolmogorovSmirnovData';\nimport { ChiSquareData } from '../Interfaces/Validators/ChiSquareData';\n\nconst TableStyle = css({\n  border: '1px solid #ccc',\n  borderRadius: '4px',\n  '&:hover': {\n    border: '1px solid black',\n  },\n});\n\ninterface ValidationTableProps {\n  data: KolmogorovSmirnovData | ChiSquareData;\n}\n\nconst ValidationTable = (props: ValidationTableProps) => {\n  const chiSquareHeaders = {\n    start: 'Start',\n    end: 'End',\n    absolute: 'FAbsolute',\n    probability: 'Probability',\n    theoretical: 'Theoretical',\n    result: 'Result',\n  };\n\n  const chiSquareValues: { [key: string]: string } = {\n    X0: 'X0',\n    X1: 'X1',\n    classes: 'Classes',\n    k: 'K',\n    range: 'Range',\n    isValid: 'Valid',\n  };\n\n  const kolmogorovSmirnovHeaders = {\n    cdf: 'CDF',\n    cdf_empirical: 'CDF Empirical',\n    deviation_plus: 'Deviation +',\n    deviation_minus: 'Deviation -',\n  };\n\n  const kolmogorovValues: { [key: string]: string } = {\n    deviation_max_plus: 'D +',\n    deviation_max_minus: 'D -',\n    deviation_max: 'Dmax',\n    deviation_critical: 'D Critical',\n    isValid: 'Valid',\n  };\n\n  const isChiSquare = () => {\n    return 'classes' in props.data;\n  };\n\n  const getValidationHeaders = (): { [key: string]: string } => {\n    return 'classes' in props.data\n      ? chiSquareHeaders\n      : kolmogorovSmirnovHeaders;\n  };\n\n  return (\n    <div css={divStyleRows}>\n      <h3>{isChiSquare() ? 'Chi Square' : 'Kolmogorov Smirnov'}</h3>\n\n      <div css={divStyleColumns}>\n        {Object.keys(isChiSquare() ? chiSquareValues : kolmogorovValues).map(\n          (key) => (\n            <TextField\n              key={`chi-square-value-${key}`}\n              label={(isChiSquare() ? chiSquareValues : kolmogorovValues)[key]}\n              variant='outlined'\n              value={(props.data as any)[key]}\n              InputProps={{\n                readOnly: true,\n              }}\n              color={\n                key === 'isValid'\n                  ? (props.data as any)[key]\n                    ? 'success'\n                    : 'error'\n                  : undefined\n              }\n              focused={key === 'isValid'}\n            />\n          ),\n        )}\n      </div>\n\n      <TableContainer css={TableStyle} sx={{ maxHeight: 350 }}>\n        <Table size='small'>\n          <TableHead>\n            <TableRow>\n              {Object.keys(getValidationHeaders()).map((header, index) => (\n                <TableCell\n                  key={`validation-table-header-${index}`}\n                  align='left'\n                >\n                  {getValidationHeaders()[header]}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {props.data.table.map((row, index) => (\n              <TableRow\n                key={`validation-table-row-${index}`}\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n              >\n                {Object.keys(getValidationHeaders()).map((key, i) => (\n                  <TableCell\n                    key={`validation-table-cell-${index}-${i}`}\n                    align='left'\n                  >\n                    {(row as any)[key]}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      <CSVLink\n        data={props.data.table}\n        filename='validation.csv'\n        style={{ textDecoration: 'none' }}\n      >\n        <Button variant='outlined' fullWidth>\n          Save as CSV\n        </Button>\n      </CSVLink>\n    </div>\n  );\n};\n\nexport default ValidationTable;\n","/** @jsxImportSource @emotion/react */\nimport React from 'react';\nimport { css } from '@mui/styled-engine';\nimport { Backdrop, Modal, Typography } from '@mui/material';\n\nconst modalStyle = css({\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 600,\n  backgroundColor: 'white',\n  boxShadow: '24px',\n  padding: '15px',\n  border: '1px solid #ccc',\n  borderRadius: '4px',\n  '&:hover': {\n    border: '1px solid black',\n  },\n  '@media (max-width: 550px)': {\n    width: '80%',\n  },\n});\n\ninterface ModalProps {\n  title: string;\n  message: string;\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst WarningModal = (props: ModalProps) => {\n  const handleClose = () => props.setOpen(false);\n  return (\n    <Backdrop open={props.open} onClick={handleClose}>\n      <Modal open={props.open} onClose={handleClose}>\n        <div css={modalStyle}>\n          <Typography id='modal-modal-title' variant='h6' component='h2'>\n            {props.title}\n          </Typography>\n          <Typography id='modal-modal-description' sx={{ mt: 2 }}>\n            {props.message}\n          </Typography>\n        </div>\n      </Modal>\n    </Backdrop>\n  );\n};\n\nexport default WarningModal;\n","/** @jsxImportSource @emotion/react */\nimport React, { useState } from 'react';\nimport { css } from '@emotion/react';\nimport {\n  AppBar,\n  SelectChangeEvent,\n  Toolbar,\n  Typography,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n  Button,\n} from '@mui/material';\n\nimport InputRNG from '../components/InputRNG';\nimport RandomsList from '../components/RandomsList';\nimport { RNGOptions } from '../enums/RNGOptions';\nimport { InputValues } from '../Interfaces/data/types';\nimport { convertInputToValues } from '../utils/convertInputToValues';\nimport { LinearCongruential } from '../classes/Generators/LinearCongruential';\nimport { CombinedCongruential } from '../classes/Generators/CombinedCongruential';\nimport { MixedCongruential } from '../classes/Generators/MixedCongruential';\nimport { MiddleSquares } from '../classes/Generators/MiddleSquares';\nimport { MultiplicativeCongruential } from '../classes/Generators/MultiplicativeCongruential';\nimport ValidationTable from '../components/ValidationTable';\nimport { divStyleColumns, divStyleRows } from '../styles/styles';\nimport { KolmogorovSmirnovData } from '../Interfaces/Validators/KolmogorovSmirnovData';\nimport { ChiSquareData } from '../Interfaces/Validators/ChiSquareData';\nimport { HullDobell } from '../Interfaces/Validators/HullDobell';\nimport WarningModal from '../components/WarningModal';\n\nconst rootDivStyle = css({\n  margin: '32px 24px',\n  '@media (max-width: 600px)': {\n    margin: '24px 16px',\n  },\n  '& > *': {\n    width: '100%',\n  },\n});\n\nconst Layout = () => {\n  const emptyObjectValues = { seed: '', a: '', c: '', m: '' };\n  const emptyHullDobell = {\n    rule1: { areRelativePrimes: false },\n    rule2: { primeDivision: false },\n    rule3: { mDivision: false, aDivision: false },\n    general: { check: false },\n  };\n\n  const [optionRNG, setOptionRNG] = useState<string>('1');\n  const [numOfRandoms, setNumOfRandoms] = useState('');\n  const [numOfGenerators, setNumOfGenerators] = useState('1');\n  const [inputValues, setInputValues] = useState<InputValues[]>([\n    emptyObjectValues,\n  ]);\n\n  const [inputNotComplete, setInputNotComplete] = useState(true);\n\n  const [hullDobell, setHullDobell] = useState<HullDobell>(emptyHullDobell);\n  const [randomsList, setRandomsList] = useState<number[]>([]);\n  const [validationData, setValidationData] = useState<\n    KolmogorovSmirnovData | ChiSquareData\n  >({} as KolmogorovSmirnovData | ChiSquareData);\n  const [alphaStr, setAlphaStr] = useState('0.05');\n  const [openModal, setOpenModal] = useState(false);\n  const [errorTitle, setErrorTitle] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  let requiredByOption: { [key: string]: string[] } = {\n    [RNGOptions.MiddleSquares]: ['seed'],\n    [RNGOptions.LinearCongruential]: ['seed', 'a', 'c', 'm'],\n    [RNGOptions.MixedCongruential]: ['seed', 'a', 'c', 'm'],\n    [RNGOptions.CombinedCongruential]: ['seed', 'a', 'm'],\n    [RNGOptions.MultiplicativeCongruential]: ['seed', 'a', 'm'],\n  };\n\n  const handleRNGChange = (event: SelectChangeEvent) => {\n    const option = event.target.value;\n\n    setOptionRNG(option);\n\n    let numOfG = option !== RNGOptions.CombinedCongruential ? '1' : '2';\n    handleChangeGenerators(numOfG, option);\n    setNumOfGenerators('');\n\n    validateCompleteInput([emptyObjectValues]);\n  };\n\n  const handleChangeNumOfRandom = (strNumOfRandom: string) => {\n    const number = Number(strNumOfRandom);\n    if (!number && strNumOfRandom !== '') return;\n\n    setNumOfRandoms(strNumOfRandom);\n\n    validateCompleteInput(inputValues);\n  };\n\n  const handleChangeGenerators = async (\n    strNumOfGenerators: string,\n    option: string,\n  ) => {\n    const newArr = [];\n    let number = Number(strNumOfGenerators);\n    if (!number && strNumOfGenerators !== '') return;\n\n    if (\n      strNumOfGenerators === '' ||\n      (strNumOfGenerators === '1' && option === RNGOptions.CombinedCongruential)\n    ) {\n      setNumOfGenerators(strNumOfGenerators);\n      number = 2;\n    } else {\n      setNumOfGenerators(String(number));\n    }\n\n    for (let i = 0; i < number; i++) newArr.push(emptyObjectValues);\n\n    setInputValues(newArr);\n\n    validateCompleteInput(newArr);\n  };\n\n  const validateCompleteInput = (inputVals: InputValues[]) => {\n    let check = true;\n\n    inputVals.forEach((values) =>\n      requiredByOption[optionRNG].forEach(\n        (key) => (check = check && (values as InputValues)[key] !== ''),\n      ),\n    );\n\n    setInputNotComplete(!check);\n  };\n\n  const getCurrentRNG = () => {\n    if (optionRNG === RNGOptions.MiddleSquares) return MiddleSquares;\n    else if (optionRNG === RNGOptions.LinearCongruential)\n      return LinearCongruential;\n    else if (optionRNG === RNGOptions.MixedCongruential)\n      return MixedCongruential;\n    else if (optionRNG === RNGOptions.MultiplicativeCongruential)\n      return MultiplicativeCongruential;\n    else return CombinedCongruential;\n  };\n\n  const handleChangeAlpha = (value: string) => {\n    if (isNaN(Number(value))) return;\n\n    setAlphaStr(value);\n  };\n\n  const generateRandoms = async () => {\n    const numOfRandomsValue =\n      numOfRandoms === '' ? undefined : Number(numOfRandoms);\n\n    let valuesObj =\n      optionRNG === RNGOptions.CombinedCongruential\n        ? convertInputToValues(inputValues)\n        : convertInputToValues(inputValues)[0];\n\n    await getCurrentRNG()\n      .generateRandoms(valuesObj, numOfRandomsValue)\n      .then(\n        (randoms) => {\n          setRandomsList(randoms);\n\n          if (optionRNG === RNGOptions.MixedCongruential) {\n            setHullDobell(MixedCongruential.validHullDobell());\n          }\n        },\n        (error) => {\n          console.log(error);\n          handleOpen('Error during generation', error);\n        },\n      );\n  };\n\n  const makeValidation = (validationType: string, alpha: number) => {\n    (\n      getCurrentRNG() as\n        | typeof LinearCongruential\n        | typeof MultiplicativeCongruential\n        | typeof MixedCongruential\n    )\n      .validate(validationType as 'CS' | 'KS', alpha)\n      .then(\n        (data) => {\n          setValidationData(data);\n        },\n        (error) => {\n          console.log(error);\n          setValidationData(\n            {} as React.SetStateAction<KolmogorovSmirnovData | ChiSquareData>,\n          );\n          handleOpen('Error during validation', error);\n        },\n      );\n  };\n\n  const clean = () => {\n    setRandomsList([]);\n    setValidationData(\n      {} as React.SetStateAction<KolmogorovSmirnovData | ChiSquareData>,\n    );\n    setHullDobell(emptyHullDobell);\n  };\n\n  const handleOpen = (title: string, message: string) => {\n    setOpenModal(true);\n    setErrorTitle(title);\n    setErrorMessage(message);\n  };\n\n  return (\n    <div>\n      <header>\n        <AppBar position='static'>\n          <Toolbar variant='dense'>\n            <Typography variant='h6' color='inherit' component='div'>\n              Random Number Generator\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </header>\n      <div css={rootDivStyle}>\n        <form css={divStyleRows}>\n          <FormControl\n            fullWidth\n            focused={\n              randomsList.length > 0 ? !(randomsList.length > 0) : undefined\n            }\n          >\n            <InputLabel>Random Number Generator</InputLabel>\n            <Select\n              value={optionRNG}\n              label='Random Number Generator'\n              onChange={handleRNGChange}\n              inputProps={{\n                readOnly: randomsList.length > 0,\n              }}\n            >\n              <MenuItem value={RNGOptions.MiddleSquares}>\n                Middle Squares\n              </MenuItem>\n              <MenuItem value={RNGOptions.LinearCongruential}>\n                Linear Congruential\n              </MenuItem>\n              <MenuItem value={RNGOptions.MixedCongruential}>\n                Mixed Congruential\n              </MenuItem>\n              <MenuItem value={RNGOptions.CombinedCongruential}>\n                Combined Congruential\n              </MenuItem>\n              <MenuItem value={RNGOptions.MultiplicativeCongruential}>\n                Multiplicative Congruential\n              </MenuItem>\n            </Select>\n          </FormControl>\n\n          <br />\n\n          <TextField\n            label='Number of randoms'\n            variant='outlined'\n            value={numOfRandoms}\n            onChange={(event) => handleChangeNumOfRandom(event.target.value)}\n            InputProps={{\n              readOnly: randomsList.length > 0,\n            }}\n            focused={\n              randomsList.length > 0 ? !(randomsList.length > 0) : undefined\n            }\n          />\n\n          {RNGOptions.CombinedCongruential === optionRNG && (\n            <TextField\n              label='Number of generators'\n              variant='outlined'\n              value={numOfGenerators}\n              onChange={(event) =>\n                handleChangeGenerators(event.target.value, optionRNG)\n              }\n              InputProps={{\n                readOnly: randomsList.length > 0,\n              }}\n              focused={\n                randomsList.length > 0 ? !(randomsList.length > 0) : undefined\n              }\n            />\n          )}\n\n          {inputValues.map((_, index) => (\n            <InputRNG\n              key={`input-values-${index}`}\n              inputValuesArr={inputValues}\n              setInputValues={\n                setInputValues as React.Dispatch<\n                  React.SetStateAction<InputValues[]>\n                >\n              }\n              index={index}\n              validateCompleteInput={validateCompleteInput}\n              randomsListLength={randomsList.length}\n              requiredByOption={requiredByOption[optionRNG]}\n            />\n          ))}\n\n          {randomsList.length === 0 && (\n            <Button\n              variant='contained'\n              onClick={generateRandoms}\n              disabled={inputNotComplete}\n            >\n              Generate randoms\n            </Button>\n          )}\n\n          {randomsList.length > 0 && (\n            <Button\n              variant='contained'\n              color='error'\n              onClick={clean}\n              disabled={inputNotComplete}\n            >\n              Start again\n            </Button>\n          )}\n        </form>\n\n        <br />\n\n        {randomsList.length > 0 && (\n          <>\n            {optionRNG === RNGOptions.MixedCongruential && (\n              <>\n                <h1>Hull–Dobell Theorem</h1>\n                <p>\n                  The generator{' '}\n                  <strong>\n                    {hullDobell.general.check ? 'has' : 'does not have'} full\n                    period\n                  </strong>\n                </p>\n                <ol>\n                  <li>\n                    <strong>{inputValues[0].c}</strong> and{' '}\n                    <strong>{inputValues[0].m}</strong> are{' '}\n                    {hullDobell.rule1.areRelativePrimes ? '' : 'not'} relative\n                    primes\n                  </li>\n                  <li>\n                    All primes that divide <strong>{inputValues[0].m}</strong>,{' '}\n                    {hullDobell.rule2.primeDivision ? '' : 'do not'} divide (\n                    <strong>{inputValues[0].a}</strong> - 1){' '}\n                  </li>\n                  <li>\n                    4{' '}\n                    {hullDobell.rule3.mDivision ? `divides` : 'does not divide'}{' '}\n                    <strong>{inputValues[0].m}</strong>,{' '}\n                    {hullDobell.rule3.mDivision\n                      ? hullDobell.rule3.aDivision\n                        ? `so 4 divides`\n                        : `but 4 does not divide`\n                      : 'so it does not have to divide'}{' '}\n                    (<strong>{inputValues[0].a}</strong> - 1)\n                  </li>\n                </ol>\n                <br />\n              </>\n            )}\n\n            <h1>Random Numbers Generated</h1>\n            <p>\n              Total randoms generated: <strong>{randomsList.length}</strong>\n            </p>\n            <RandomsList numsList={randomsList} />\n\n            <br />\n\n            {[\n              RNGOptions.LinearCongruential,\n              RNGOptions.MultiplicativeCongruential,\n              RNGOptions.MixedCongruential,\n            ].includes(optionRNG as RNGOptions) && (\n              <>\n                <h1>Validation</h1>\n                <div css={divStyleRows}>\n                  <TextField\n                    label='Alpha'\n                    variant='outlined'\n                    value={alphaStr}\n                    onChange={(event) => handleChangeAlpha(event.target.value)}\n                  />\n\n                  <div css={divStyleColumns}>\n                    <Button\n                      variant='contained'\n                      onClick={() => makeValidation('CS', Number(alphaStr))}\n                      disabled={randomsList.length < 10}\n                    >\n                      Chi Square\n                    </Button>\n                    <Button\n                      variant='contained'\n                      onClick={() => makeValidation('KS', Number(alphaStr))}\n                    >\n                      Kolmogorov Smirnov\n                    </Button>\n                  </div>\n\n                  {validationData.table && (\n                    <ValidationTable data={validationData} />\n                  )}\n                </div>\n              </>\n            )}\n          </>\n        )}\n      </div>\n      <WarningModal\n        open={openModal}\n        setOpen={setOpenModal}\n        title={errorTitle}\n        message={errorMessage}\n      />\n    </div>\n  );\n};\n\nexport default Layout;\n","import React from 'react';\nimport Layout from './containers/Layout';\n\nconst App = () => (\n  <div className='App'>\n    <Layout />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './styles/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}